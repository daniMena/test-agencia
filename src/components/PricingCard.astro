---
interface Props {
  title: string;
  price: string;
  features: string[];
  isPopular?: boolean;
}

const { title, price, features, isPopular = false } = Astro.props;
---

<div class={`relative p-8 bg-white border rounded-2xl shadow-sm flex flex-col ${isPopular ? 'border-primary-500 ring-2 ring-primary-500' : 'border-gray-200'}`}>
  {isPopular && (
    <div class="absolute -top-4 right-8 rounded-full bg-primary-500 px-4 py-1 text-sm font-semibold text-white">
      Popular
    </div>
  )}
  <div class="mb-8">
    <h3 class="text-lg font-semibold leading-5">{title}</h3>
    <p class="mt-4 flex items-baseline">
      <span class="text-4xl font-bold tracking-tight">{price}</span>
      <span class="ml-1 text-sm font-semibold text-gray-500">/mes</span>
    </p>
  </div>
  <ul class="space-y-4 flex-1">
    {features.map((feature) => (
      <li class="flex items-start">
        <svg class="h-6 w-6 flex-shrink-0 text-primary-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
        </svg>
        <span class="ml-3 text-sm text-gray-700">{feature}</span>
      </li>
    ))}
  </ul>
  <a
    href="/contacto"
    class={`mt-8 block w-full rounded-md px-6 py-4 text-center text-sm font-semibold leading-4 ${
      isPopular
        ? 'bg-primary-600 text-white hover:bg-primary-700'
        : 'text-primary-600 border border-primary-600 hover:bg-primary-50'
    }`}
  >
    Empezar ahora
  </a>
</div>